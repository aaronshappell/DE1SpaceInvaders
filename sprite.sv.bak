/*
sprite.sv

Aaron Shappell, 1739332
Ryan Shappell, 1739333
2/25/2020
EE371
Lab 6, Space Invaders

This lab is the final project, we chose to implement the classic game Space Invaders on the DE1_SoC.
*/

// TODO
module sprite #(parameter WIDTH = 10, parameter HEIGHT = 10)(clk, reset, x, y, vga_x, vga_y, data, draw, color);
	// Input and output logic
	input logic clk, reset;
	input logic [9:0] x, vga_x;
	input logic [8:0] y, vga_y;
	input logic [WIDTH-1:0] data [HEIGHT-1:0];
	output logic draw, color;
	
	// Internal logic
	logic [WIDTH-1:0] sprite [HEIGHT-1:0];
	
	// Check if drawing is valid for the current pixel
	assign draw = (vga_x >= x && vga_x <= (x + WIDTH - 1)) && (vga_y >= y && vga_y <= (y + HEIGHT - 1));
	// Get color data for given pixel
	assign color = draw ? sprite[vga_y - y][vga_x - x] : 1'b0;
	
	// Sequential DFF logic
	always_ff @(posedge clk) begin
		if(reset)
			sprite <= data; // Initialize sprite data
	end
endmodule

/*
Tests all possible inputs of the sprite module to verify the outputs and functionality.
*/
module sprite_tb();
	// Test logic
	parameter WIDTH = 4;
	parameter HEIGHT = 4;
	
	logic clk, reset;
	logic [9:0] x, vga_x;
	logic [8:0] y, vga_y;
	logic [WIDTH-1:0] data [HEIGHT-1:0];
	logic draw, color;
	
	// Device under test
	sprite #(WIDTH, HEIGHT) dut (.*);
	
	// Setup clock
	parameter CLOCK_PERIOD = 100;
	initial begin
		clk <= 0;
		forever #(CLOCK_PERIOD / 2) clk <= ~clk;
	end
	
	// Test inputs
	initial begin
		reset <= 1;
		data <= {{1'b1,1'b0,1'b0,1'b0}, {1'b0,1'b1,1'b0,1'b0}, {1'b0,1'b0,1'b1,1'b0}, {1'b0,1'b0,1'b0,1'b1}};
		x <= 4; y <= 4;
		vga_x <= 0; vga_y <= 0;
		@(posedge clk);
		reset <= 0;
		@(posedge clk);
		for(int r = 0; r < 10; r++) begin
			vga_y <= r;
			for(int c = 0; c < 10; c++) begin
				vga_x <= c; @(posedge clk);
			end
		end
		@(posedge clk);
		$stop;
	end
endmodule
