module score 
	#(parameter FILE = "numbers.txt", parameter W = 5, parameter H = 5)
	(clk, reset, vga_x, vga_y, wave_score, r, g, b);
	
	// Input and Output logic
	input logic clk, reset;
	input logic [9:0] vga_x;
	input logic [8:0] vga_y;
	input logic [10:0] wave_score; // Max wave score is 1100
	output logic [7:0] r, g, b;
	
	// Internal logic
	logic [9:0] x;
	logic [8:0] y;
	logic [14:0] prev_score, total_score; // Max score is 32768
	logic [4:0] pixels;
	
	// Score display digits
	score_disp ones (.clk, .reset, .x(x+24), .y, .vga_x, .vga_y, .num(total_score % 10), .pixel(pixels[0]));
	score_disp tens (.clk, .reset, .x(x+18), .y, .vga_x, .vga_y, .num(total_score / 10 % 10), .pixel(pixels[1]));
	score_disp thous (.clk, .reset, .x(x+12), .y, .vga_x, .vga_y, .num(total_score / (10**2) % 10), .pixel(pixels[2]));
	score_disp tenthous (.clk, .reset, .x(x+6), .y, .vga_x, .vga_y, .num(total_score / (10**3) % 10), .pixel(pixels[3]));
	score_disp hunthous (.clk, .reset, .x, .y, .vga_x, .vga_y, .num(total_score / (10**4) % 10), .pixel(pixels[4]));
	
	// Get current rgb via reduction of pixels
	assign r = {8{|pixels}};
	assign g = {8{|pixels}};
	assign b = {8{|pixels}};
	
	always_ff @(posedge clk) begin
		if (reset) begin
			x <= 0;
			y <= 0;
			total_score <= 0;
			prev_score <= 0;
		end else begin
			prev_score <= wave_score;
			
			if (wave_score >= prev_score)
				total_score <= total_score + wave_score - prev_score;
		end
	end
endmodule

module score_tb();
	logic clk, reset;
	logic [9:0] vga_x;
	logic [8:0] vga_y;
	logic [10:0] wave_score; // Max wave score is 1100
	logic [7:0] r, g, b;
	
	score dut (.*);
	
	// Setup clock
	parameter CLOCK_PERIOD = 100;
	initial begin
		clk <= 0;
		forever #(CLOCK_PERIOD / 2) clk <= ~clk;
	end
	
	initial begin
		reset <= 1; @(posedge clk);
		reset <= 0; wave_score <= 0; @(posedge clk);
		for(int row = 0; row < 10; row++) begin
			vga_y <= row;
			for(int col = 0; col < 10; col++) begin
				wave_score <= wave_score + 50;
				vga_x <= col; @(posedge clk);
			end
		end
		$stop;
	end
endmodule
